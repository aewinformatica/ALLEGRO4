<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Allegro Newbie Tutorial</title><link href="style1.css" rel="stylesheet" type="text/css"></head><body><center><div class="mainBox">  <div align="left">    <div class="borderBottom"><span class="headerText">Allegro Newbie Tutorial</span> : Lesson 4 - Masked Blitting, Drawing Sprites, Clearing Bitmaps and the Keyboard Buffer<br>      <br>      In this lesson we will be blitting a masked bitmap and a sprite as well as learning how to clear a bitmap and the keybuffer.    </div>    </div>  <div align="left"><br>    Initialize the general stuff.<br>    <br>    <div class="codeBox">#include &lt;allegro.h&gt;// You must include the Allegro Header file      <p> int main(int argc, char *argv[]) <br>  { <br>&nbsp;&nbsp; allegro_init(); // Initialize Allegro <br>&nbsp;&nbsp; install_keyboard(); // Initialize keyboard routines <br>&nbsp;&nbsp; set_color_depth(16); // Set the color depth <br>&nbsp;&nbsp; set_gfx_mode(GFX_AUTODETECT, 640,480,0,0); // Change our graphics mode to 640x480</p>    </div>    Create a bitmap, and load the picture into memory<br>    <br>    <div class="codeBox">BITMAP *my_pic = NULL; //Declare a BITMAP called my_pic <br>my_pic = load_bitmap(&quot;picture.bmp&quot;, NULL); // Load our picture</div>    <br>     Here we will blit a <em>masked</em> bitmap; that is, it contains pixels that we want will be shown as transparent. In order to make transparent parts in a bitmap, you must use the RGB color:     <p> Red 255 <br>  Green 0 <br>  Blue 255 </p>     <p> This color will be the brightest pink. Any pixel in a bitmap that is this color when you draw a bitmap using <em>masked_bitmap</em> or <em>draw_sprite</em> will be transparent. <em>masked_blit</em> takes the same parameters as blit, so you can perform clipping if you wish.</p>     <div class="codeBox">masked_blit(my_pic, screen, 0,0,0,0,572,473);//Draw the whole bitmap to the screen at (0,0)<br>readkey();// Wait untill a key is pressed</div>     <br>The <em>clear_keybuf</em> function will just clear the keybuffer of any information. We are calling this because we don't want the program to think a key is pressed when we call readkey for the second time. Some computers are so fast that they may draw the upcoming sprite and think that a key is still pressed from the previous keypress.     <br><br>Note that this isn't an efficient way of preventing the next chunk of code from thinking they key is still pressed. You will notice that if you hold down the key long enough, clearing the keybuffer seemingly has no effect (it still does clear the keyboard buffer, though)  and the program will simply look like it exits. There are better methods for preventing execution of portions of code until a key is actually released. This topic is not covered in this lesson.<br>    <br>    <div class="codeBox">clear_keybuf();</div>    <br>Here we will be using two new functions. <br>As always, before doing any drawing or routines with bitmaps, we must aqcuire the screen. <br><br>The next function, <em>clear_bitmap</em> does exactly what its name implies: it will clear a bitmap. In this case, we want to clear the SCREEN, which is a special kind of bitmap (but a bitmap nonetheless). <br>After clearing the screen, we will be using the function <em>draw_sprite</em>. Draw sprite is exactly the same as masked_blit except for the fact that it has no clipping capabilities.<p> <em>draw_sprite</em>() will always draw the full, masked, bitmap. Also, notice that the source bitmap and destination bitmap are reversed. When calling <em>draw_sprite</em> put the bitmap you wish to draw to first, and the bitmap you are actually going to be drawing second. </p><p> When you run the program, you won't be able to tell the difference between <em>masked_blit</em> and <em>draw_sprite</em>.<br></p>    <div class="codeBox">clear_bitmap(screen); <br>draw_sprite(screen, my_pic, 0,0); //Draw the bitmap at 0,0. <br>readkey(); //Wait for a keypress</div>    <p> Destroy the bitmap, and exit the program.<br>    </p>    <div class="codeBox">&nbsp;destroy_bitmap(my_pic); //Release the bitmap data <br>&nbsp;return 0; // Exit with no errors <br>} <br>END_OF_MAIN() // This must be called right after the closing bracket of your MAIN function. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is Allegro specific.</div>    <p> This concludes Lesson 4. You now know how to draw masked bitmaps using two different functions, clear a bitmap, and clear the keyboard buffer. </p>        <a href="alltut_lesson5.htm">Continue to Lesson 5</a><br>        <a href="alltut_index.htm">Back to the main page</a><br>        <br>  </div></div></center></body></html>