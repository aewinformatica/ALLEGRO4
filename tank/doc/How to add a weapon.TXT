Add a new weapon to Charred Dirt

Shot.cpp (near Ln 87)
Add entry to 
projectile_t    projectiles[NUM_PROJECTILES]={
The weapons are in display order so you need to move to a location that is close to the price you are going to use.
Easy way is copy an entry similar in type to what you are going to make. The comments tell what most of the entries are for.

    char    name[64];                   // Name of projectile
    char    gamename[64];               // Name that will show up on the HUD in case the normal name is too long
    int     iconflags;                  // Flags that determine how to represent this weapon as icons - Defined in shot.h
    int     flags;                      // Special flags that this projectile uses - Defined in shot.h
    int     cost;                       // Starting price to purchase at
    int     numrecieve;                 // Number you get w/ each purchase
    bool    rotates;                    // Will we be rotating this?
                // Damage in each of the 3 types
    int     damageh,                    // Damage heat
    int     damagee,                    // Damage electric
    int     damageb;                    // Damage ballistic
    
    int     expradius;                  // Radius of explosion
    int     detonatespeed;              // Detonation speed (in tics)
    int     expspeed;                   // Explosion speed (in tics)
    int     exptime;                    // How long shall we do this for? (in tics)
                // Explosion hook to subroutine if special (non-round) explosion is required eg Polaris_Explode
    void    (* explodefunc)(int shot);
                // the state as defined in enum _state sprite.h Ln 35 see below
    _state   state;                     // starting state   
    PALETTE *usepal;                    // Palette to use for generated explosions
The following function hooks are defined at the top of the shot.cpp file and the function itself is coded below in the same file.
If NULL then default processing is used.
    void    (* func)(int shot);         // Run this function every tic for special missile instructions
    void    (* hitfunc)(int shot, int tankhit);     // Called when a missile hits a tank
    void    (* groundfunc)(int shot);   // Called when a missile hits a tank
Sound is a number that is defined in snddat.h. 
snddat.h is generated from the sounds.dat file by grabber.
    int     firesound;                  // Sound the tank makes when missile is fired 
    int     explodesound;               // Sound the missile makes when it explodes
    
    int     thischaracter;              // This weapon can only be used by this specified character (-1 for any player)

The following are used for napalm shots only.
    int     pixelfill;                  // Number of pixels to fill up
    float   pixeldamageh;               // Damage each particle does
    float   pixeldamagee;               
    float   pixeldamageb;               
    int     pixelpower;                 // Pixel force
    int     pixeltime;                  // Time napalm stays on the ground
    int     pixeldamagetime;            // Time before damage is no longer calculated
    int     pixelcolorr, pixelcolorg, pixelcolorb;  // Pixel color
 --------------------------------------------------------------------
 
State
Each icon is defined as part of a state.

New states are added to the end of the state table (sprites.cpp near Ln 1380)
An entry in the state enum in sprites.h is added at the same numerical location as the state in the sprite table.
An entry must be added for every line added to the state table. That's why you add at the end of the state table. This is not mandatory.

The state table has 6 entries per line. These entries are:

    1st stat            The same index number as used in the enum i.e. its own index
    Next state          The next state (table line) to be used when the time is up
    sprite function     The function to be called when time is up or NULL if nothing special is required.
    allegro_BMPnum      The index number as defined in sprdat.h.
                            sprdat.h is generated by grabber from sprites.dat.
                            This is the sprite image that is displayed.
    flags               Normally set to NORMAL_STATE.
                            The other state of HAS_ALPHA requires alpha images in the alphas.dat file.
                            Currently only used for explosions.
    tics                The number of frames that this sprite remains visible.
    
When the time is up the "sprite function" is called if not NULL, then the state defined in the "next state" entry is used and
if this is S_NULL then the sprite dies automatically. The "sprite function" is defined at the top of the sprites.cpp file and 
the function itself is coded below the table in the same file. The "sprite function" is passed a pointer to the sprite struct 
so that the programmer can set whatever variables are required.
That covers the display part of a weapon.


If the Function hook, Hit function hook and Ground-impact function hook are set to NULL for a weapon then
 the system will generate a sprite as defined in the nominated state table entry.
 This sprite will have its velocity set by the shot factors (angle & power) and thus follow a path up and over and down
 and when it contacts dirt or tank or killable sprite (pod, tower fuelcylinder etc), then it explodes
 with the size and damage as set in the projectiles table.
  
 A shot is calculated by "drawing" a straight line at the angle of the object (missile, bullet frag etc). The distance is set by the velocity.
 For each pixel that would be drawn a callback routine (callbackshot in shot.cpp) is called to check if contact has been made.
 For self modifying missiles like a "Shotgun Blast" then a ghost is used. This missile is not visible and is used to get a point away from the tank (no self damage).
 
 A "M.I.R.V." is a standard missile with a (* func)(int shot) hook that checks if the Y velocity is zero i.e. we're about to start falling.
  This then creates new missiles "MIRV Shot" which uses copies of the MIRV missile velocity and angle. Slight changes to angle are added foe each child.
  The main MIRV missile is then killed with an explosion.

 A "Funky Bomb" is a standard missile with a special explode hook that does a similar action as the MIRV.
 Examine other hook functions to see how they work mainly the special weapons.
 
 
 Non-projectile weapons like the roller that require the default shot to be modified, needs
  to have bits of code added to the SHOT::Thinker routine in shot.cpp.
  This is not easy to get it to do what you want but it is easy to change the functions of other weapons.
  
NOTE:
Any use of the rand() function must be restricted to visual non-game functions only else the multiplayer option will get further out of sync than it already is.
Using a random number for game play requires that this number be passed over the network.
This requires a change in the network protocol and is a total pain in the butt!!
It can be got-around by including it within existing data transfer such as tankfrom or health.
This is not "nice" but it saves an older version from crashing when that weapon is used.
Currently the master server will accept only the standard version of the network protocol so any change means using IP addresses directly for internet games. It does not affect LAN games.

