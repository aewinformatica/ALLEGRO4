<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Allegro Newbie Tutorial</title><link href="style1.css" rel="stylesheet" type="text/css"></head><body><center><div class="mainBox">  <div align="left">    <div class="borderBottom"><span class="headerText">Allegro Newbie Tutorial</span> : Lesson 6 - Using Timers<br>      <br>      In this lesson we will learn how to use timers in order to make Allegro programs run at the same speed on any system </div>    </div>  <div align="left"><br>    <div class="codeBox">#include &lt;allegro.h&gt; // You must include the Allegro Header file</div>      <p>This is the timer function and integer.<br>Since they will be used throughout the entire program, basically being tested each loop, we will just declare them globally. There really isn't any waste of memory seeing as how they are used so often.<br>      </p>      <div class="codeBox">volatile long speed_counter = 0; // A long integer which will store the value of the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // speed counter.<p> void increment_speed_counter() // A function to increment the speed counter<br>  {<br>&nbsp;&nbsp;speed_counter++; // This will just increment the speed counter by one. :)<br>  }<br>  END_OF_FUNCTION(increment_speed_counter);&nbsp;//&nbsp;Make sure you tell it that it's the end of the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;//&nbsp;function</p>      </div>      <p>  Set up the general main function, and init allegro.<br>      </p>      <div class="codeBox">int main(int argc, char *argv[])<br>{<br>&nbsp;&nbsp; allegro_init(); // Initialize Allegro<br>&nbsp;&nbsp;&nbsp;install_keyboard(); // Initialize keyboard routines</div>      <p>        You need to tell allegro to install the timer routines in order to use timers.<br>      </p>      <div class="codeBox">install_timer(); // Initialize the timer routines</div>      <p>Ok, now heres some new code. First, we need to, as the function suggests, <em>lock</em> our speed counter. Then, we need to lock the function which increments the speed counter. Locking is used maily for historical reasons (eg: Pure DOS Allegro applications) It doesn't hurt to lock the variable and function anyway even if we're not running DOS only mode.      </p>      <div class="codeBox">LOCK_VARIABLE(speed_counter); //Used to set the timer - which regulates the game's<br>LOCK_FUNCTION(increment_speed_counter);//speed.</div>      <p>        Next, we need to tell the computer to keep incrementing the speed counter independent of what the program is currenlty doing with the following function. We will also tell it how fast to go. The number within the function BPS_TO_TIMER will tell the computer how many 'beat's per second. Experiment with this number to get the overall 'speed' you would like in your game. 60 works well, generally. <br>      </p>      <div class="codeBox">install_int_ex(increment_speed_counter, BPS_TO_TIMER(60));//Set our BPS</div>      <p>This next chunk of code is exactly the same as lesson 5. Create a buffer, and a bitmap (and load an image into the bitmap).<br>      </p>      <div class="codeBox"><br>        set_color_depth(16); // Set the color depth          <p> set_gfx_mode(GFX_AUTODETECT, 640,480,0,0); // Change our graphics mode to 640x480 <br>          </p>          <p> BITMAP *my_pic; //&nbsp;Declare a BITMAP called my_pic<br>  my_pic = load_bitmap(&quot;picture.bmp&quot;, NULL); // Load our picture</p>          <p> BITMAP *buffer; //&nbsp;Declare a BITMAP called buffer.</p>          <p> buffer = create_bitmap(640,480); //Create an empty bitmap.</p>          <p> /*  Declare some integers for later use */<br>  int my_pic_x = 0;&nbsp;// Holds our pictures X coorinate<br>  int my_pic_y = 0;&nbsp;// Holds our picture's Y coordinate</p>          <p>&nbsp;</p>          <p> while(!key[KEY_ESC]) //&nbsp;If the user hits escape, quit the program<br>  {</p>      </div>      <p>        Here is the last part of the timer routines. We want to separate the logic and the drawing portions of the program, so we crate a while loop to test  for the value of speed counter. While the value is greater than 0 it will do the logical part, and once it  drops down to equal to (or lower than) 0, it will draw the screen. Generally  the values of speed_counter fluctuate only between 0 and 1. What this does is allow for the computer to do the all the logical part of the  program before it blits to the screen, so you don't miss any keypresses, etc.      </p>      <div class="codeBox">&nbsp;&nbsp;while(speed_counter &gt; 0)<br>&nbsp;&nbsp;{</div>      <p>This part of the code, the &quot;series of tests&quot; is considered the logical part of the program. It figures out all calculations, etc. The non-logical part of the program would be any image blitting, or sprite(ing). Therefore, since it is a logical part of the program, it will be within the while loop that tests to see if the counter is greater than 0. <br>      </p>      <div class="codeBox">&nbsp;&nbsp;/*&nbsp;Here is a series of tests - so we can move our bitmap around the screen */<br>&nbsp;&nbsp;if(key[KEY_RIGHT])&nbsp;// If the user hits the right key, change the picture's X coordinate<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_x ++;&nbsp;// Moving right so up the X coordinate by 1<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(key[KEY_LEFT])&nbsp;// Ditto' - only for left key<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_x --;&nbsp;// Moving left, so lower the X coordinate by 1<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(key[KEY_UP])&nbsp;// If the user hits the up key, change the picture's Y coordinate<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_y --;&nbsp;// Moving up, so lower the Y coordinate by 1<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(key[KEY_DOWN])&nbsp;// Ditto' - only for down<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_y ++;&nbsp;// Moving down, so up the Y coordinate by 1<br>&nbsp;&nbsp;}</div>      <p>At the end of your logic loop you will want to tell the program to decrease  your speed_counter variable. If the program passes through this loop enough times,  then it can do all your drawing sequences without missing any keypresses! Note, however, that if your logical portion of the code takes so long and the speed_counter variable is increased (via our timer incrementing funciton) more times than it is decreased, we will remain in the logical part of the code infinitely.      </p>      <div class="codeBox">&nbsp;&nbsp;speed_counter --;<br>}&nbsp;//This is the closing bracket for the (speed_counter &gt; 0) test</div>      <p> Notice that we do all blitting and drawing in this next section of code. We only want to draw when<br>the speed counter is less than 0, when the computer is finished doing enough logic. Make sure you put it before the closing bracket for the (key[KEY_ESC]) test, or else nothing will be drawn (until you hit Escape, and then the program will shut down so fast you still won't be able to see anything! </p>      <div class="codeBox">&nbsp;&nbsp;draw_sprite(buffer, my_pic, my_pic_x, my_pic_y);&nbsp;//&nbsp;Draw the picture to the buffer<br>&nbsp;&nbsp;blit(buffer, screen, 0,0,0,0,640,480);&nbsp;//&nbsp;Draw the buffer to the screen<br>&nbsp;&nbsp;clear_bitmap(buffer); // Clear the contents of the buffer bitmap <br>} //This is the closing bracket for the (key[KEY_ESC]) test</div>      <p>Do all the destroying, finishing parts of the program.<br>      </p>      <div class="codeBox">        destroy_bitmap(my_pic);&nbsp;//&nbsp;Release the bitmap data<br>destroy_bitmap(buffer);&nbsp;//&nbsp;Release the bitmap data <br>return 0; // Exit with no errors<br>  }<br>  END_OF_MAIN() // This must be called right after the closing bracket of your MAIN function.<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is Allegro specific.</div>      <p>        That concludes timers. Pretty simple stuff, really, once you know what to put where. You can just copy the example and use it in every one of your programs.<br>        <br>        <a href="../../downloads/alltut/lesson6.zip">        </a>        <a href="alltut_lesson7.htm">Continue to Lesson 7</a><br>        <a href="alltut_index.htm">Back to the main page</a><br>        <br>      </p>  </div></div></center></body></html>