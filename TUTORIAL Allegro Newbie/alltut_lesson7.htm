<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Allegro Newbie Tutorial</title><link href="style1.css" rel="stylesheet" type="text/css"></head><body><center><div class="mainBox">  <div align="left">    <div class="borderBottom"><span class="headerText">Allegro Newbie Tutorial</span> : Lesson 7 - Simple Sprite Animation<br>      <br>       This tutorial will just play a simple animation over and over again, regarless of what key you are pressing, or in what direction you are moving.It will keep playing even if you don't press anything.<p> To acheive different effects, you could create different variables to hold the states as to what direction the user is heading, or whether the user is even moving at all!</p>    </div>    </div>  <div align="left">This stuff should be pretty much memorized by now:<br>    <br>    <div class="codeBox"><br>      #include &lt;allegro.h&gt; // You must include the Allegro Header file      <p> /* Timer stuff */ <br>  volatile long speed_counter = 0; // A long integer which will store the value of the<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;speed counter. </p>      <p> void increment_speed_counter() //&nbsp;A function to increment the speed counter<br>  {<br>&nbsp;&nbsp;speed_counter++; // This will just increment the speed counter by one.<br>  }<br>  END_OF_FUNCTION(increment_speed_counter);&nbsp;// Make sure you tell it that it's the end of the<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// function<br>      <br>  int main(int argc, char *argv[])<br>  {<br>&nbsp; allegro_init(); // Initialize Allegro<br>&nbsp;&nbsp;install_keyboard(); // Initialize keyboard routines<br>&nbsp;&nbsp;install_timer(); // Initialize the timer routines</p>      <p>&nbsp;&nbsp;LOCK_VARIABLE(speed_counter); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Used to set the timer which regulates the game's<br>&nbsp;&nbsp;LOCK_FUNCTION(increment_speed_counter); // speed.<br>&nbsp;&nbsp;install_int_ex(increment_speed_counter, BPS_TO_TIMER(60)); // Set our BPS</p>      <p> &nbsp;&nbsp;set_color_depth(16); // Set the color depth</p>      <p> &nbsp;&nbsp;set_gfx_mode(GFX_AUTODETECT, 640,480,0,0); // Change our graphics mode to 640x480</p>    </div>    Here we create 3 bitmaps. One bitmap per frame of animation, and we have a total of three different frames for the animation, so hence: frame1, frame2, and frame3.<br>    <br>    <div class="codeBox">BITMAP *frame1 = load_bitmap(&quot;frame1.bmp&quot;, NULL); // Declare a bitmap and Load our picture in one single statement<br>BITMAP *frame2 = load_bitmap(&quot;frame2.bmp&quot;, NULL); <br>BITMAP *frame3 = load_bitmap(&quot;frame3.bmp&quot;, NULL);</div>    <br>    This code is the same as in the previous lesson. Create the buffer, and location holders for the position of the frames.<br>    <br>    <div class="codeBox">BITMAP *buffer = create_bitmap(640, 480); // Declare and create a bitmap in a single statement      <p> /*  Declare some integers for later use */<br>  int my_pic_x = 0;// Holds our pictures X coorinate<br>  int my_pic_y = 0;// Holds our picture's Y coordinate</p>    </div>    Here is a simple integer that we are going to increment on each <em>logic</em> loop, therefore it will be incremented at the speed of the speed counter, which (in this program) is set at 60bps. That means when our frame_counter == 60, one full second has passed. Keep that in mind, as you will see how we use it later on.<br>    <br>    <div class="codeBox">int frame_counter = 0;&nbsp;// A counter for which frame to draw</div>    <br>    This code stays the same as the previous lessons<br>    <br>    <div class="codeBox">while(!key[KEY_ESC])//If the user hits escape, quit the program<br>{  <p> while(speed_counter &gt; 0)<br>  {<br>&nbsp;&nbsp;if(key[KEY_RIGHT]) // If the user hits the right key, change the picture's X coordinate<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_x ++; // Moving right so up the X coordinate by 1<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(key[KEY_LEFT]) // Ditto' - only for left key<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_x --; // Moving left, so lower the X coordinate by 1<br>&nbsp;&nbsp;}&nbsp;<br>&nbsp;&nbsp;else if(key[KEY_UP]) // If the user hits the up key, change the picture's Y coordinate<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_y --; // Moving up, so lower the Y coordinate by 1<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(key[KEY_DOWN]) // Ditto' - only for down<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;my_pic_y ++; // Moving down, so up the Y coordinate by 1<br>&nbsp;&nbsp;} </p>  <p> &nbsp;&nbsp;speed_counter --;</p>    </div>     Increment our frame counter at the same speed of the speed counter.<br>    <br>    <div class="codeBox">frame_counter ++;</div>    <br>    Here we test to see if the frame counter is over 4 seconds.If it is, we set it back to zeroin order to restart the animation.We are only testing for four seconds  because we are only drawing 1 frame  a second, and we're drawing a total  of four frames. The next <em>big</em> chunk of explanation  will clear up any confusion regarding this. <br>  <br>  <div class="codeBox">if(frame_counter &gt; 240)  // 60 * 4 = 240 (When frame counter = 60, 1 second has passed)<br>{<br>&nbsp;&nbsp;frame_counter = 0;<br>}</div>  <br>  This doesn't really need explanation. This is the closing bracket for one statment, and the screen aquiring function in the beginning of the drawing section of the code.  <br>  <br>  <div class="codeBox">}&nbsp;//Closing bracket for the while(speed_counter &gt; 0) statment</div>  <br>  Here is where things get a little tricky.There are multiple ways to do this, but I'll showyou the one with the least lines of code.  <p> As you read earlier, when frame_counter == 60, one second<br>  has passed, so we will draw each frame at one second.</p><div class="codeBox">// In the first second, draw the first frame<br>if(frame_counter &lt; 60) // Less than a full second<br>{<br>&nbsp;&nbsp;draw_sprite(buffer, frame1, my_pic_x, my_pic_y); // Draw the first frame<br>}<br>else if(frame_counter &gt;= 60 &amp;&amp; frame_counter &lt; 120) // Between 1 and 2 seconds<br>{<br>&nbsp;&nbsp;draw_sprite(buffer, frame2, my_pic_x, my_pic_y); // Draw the second frame<br>}<br>else if(frame_counter &gt;= 120 &amp;&amp; frame_counter &lt; 180) // If we are between 2 and 3 seconds<br>{<br>&nbsp;&nbsp;draw_sprite(buffer, frame1, my_pic_x, my_pic_y);&nbsp;// Draw the first frame again,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// to acheive better effect<br>}<br>else&nbsp;// If we are over 3 seconds<br>{<br>&nbsp;&nbsp;draw_sprite(buffer, frame3, my_pic_x, my_pic_y); // Draw the last frame.<br>}</div><br>End of the drawing portion -- same as the previous lesson's<br><br><div class="codeBox">&nbsp;&nbsp;blit(buffer, screen, 0,0,0,0,640,480); // Draw the buffer to the screen<br>&nbsp;&nbsp;clear_bitmap(buffer);<br>}</div><br>Don't forget to destroy all the bitmaps we created, and do the rest of the deinitializing.<br><br><div class="codeBox">destroy_bitmap(frame1);//Release the bitmap data<br>destroy_bitmap(frame2);//Release the bitmap data<br>destroy_bitmap(frame3);//Release the bitmap data<br>destroy_bitmap(buffer);//Release the bitmap data <br>return 0; // Exit with no errors<br>  }<br>  END_OF_MAIN() // This must be called right after the closing bracket of your MAIN function.<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is Allegro specific.</div><br>That's it. That's as <em><strong>simple</strong></em> you can get with animation. Feel free to play around with the timing, and the framing. Add in more frames if you would like. Create integers to allow the animation to play ONLY when a key is being pressed by setting a value to TRUE, when a key is pressed, and FALSE when no keys are pressed. Experiment to get exactly what you want.<br>    <br>  <a href="../../downloads/alltut/lesson7.zip">        </a>        <a href="alltut_lesson8.htm">Continue to Lesson 8</a><br>        <a href="alltut_index.htm">Back to the main page</a><br>        <br>    </div></div></center></body></html>