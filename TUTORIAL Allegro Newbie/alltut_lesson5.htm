<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Allegro Newbie Tutorial</title><link href="style1.css" rel="stylesheet" type="text/css"></head><body><center><div class="mainBox">  <div align="left">    <div class="borderBottom"><span class="headerText">Allegro Newbie Tutorial</span> : Lesson 5 - The Double Buffering Technique<br>      <br>      In this lesson we will learn how to use the double buffering technique to make things look smooth. We will also learn about the key[] array as well as the <em>clear_bitmap</em> function. </div>    </div>  <div align="left"><br>    Set up the main initializing stuff.<br>    <br>    <div class="codeBox">#include &lt;allegro.h&gt;// You must include the Allegro Header file<br>int main(int argc, char *argv[]) <br>{ <br>&nbsp;&nbsp;&nbsp; allegro_init(); // Initialize Allegro <br>&nbsp;&nbsp;&nbsp; install_keyboard(); // Initialize keyboard routines <br>&nbsp;&nbsp;&nbsp; set_color_depth(16); // Set the color depth <br>&nbsp;&nbsp;&nbsp;&nbsp;set_gfx_mode(GFX_AUTODETECT, 640,480,0,0); // Change our graphics mode to 640x480</div>    <br>Declare a bitmap my_pic and load the picture into it.<br><br><div class="codeBox"> BITMAP *my_pic = NULL; // Declare a BITMAP called my_pic <br>my_pic = load_bitmap(&quot;picture.bmp&quot;, NULL); // Load our picture</div>    <br>Declare another bitmap. This will be our 'buffer'.<br><br><div class="codeBox">BITMAP *buffer = NULL; // Declare a BITMAP called buffer.</div><br>Here is a new function. As you can see, we have already declared a BITMAP called 'buffer'. <br>This bitmap will be our buffer which will make things look smooth. We obviously don't want to load a bitmap into its memory -- we are just going to be using it to be drawing bitmaps to it. So, we use the function <em>create_bitmap</em>.<p> <em>create_bitmap</em> takes two parameters, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>create_bitmap</em>(width, height);<br> <br>  and will just create an empty bitmap in that memory location.</p><p> Pretty simple. So, lets create a bitmap with the dimensions of the screen.<br></p><div class="codeBox">buffer = create_bitmap(640,480); //Create an empty bitmap.</div><p> Delcare some integers for later use...<br></p><div class="codeBox">int my_pic_x = 0;// Holds our pictures X coorinate <br>int my_pic_y = 0;// Holds our picture's Y coordinate</div><p> As you can see in this following while loop, we will be using the key[] structure. </p><p> The key[] structure is simple. You can use it for testing - such as <br>  if(key[KEY_UP]) <br>  { <br>&nbsp;&nbsp; do_something(); <br>  } <br>  <br>  For this <em>if</em> clause, if the user hits the UP key, the clause will execute. </p><p> The same goes for a while loop, such as the one following this comment. While the escape key is not pressed, keep looping. </p><p> A list of all the keys can be found in the Allegro documentation files. <br></p><div class="codeBox">while(!key[KEY_ESC])//If the user hits escape, quit the program <br>{</div><p>Here is a series of tests so that we can move our bitmap around the screen.  Note that if you remove the if/else if structure of them and convert them to all ifs, you will be able to move the ball in a diagonal fasion!</p><div class="codeBox">if(key[KEY_RIGHT])&nbsp;// If the user hits the right key, change the picture's X coordinate <br>{ <br>&nbsp;&nbsp; my_pic_x ++;&nbsp;// Moving right so up the X coordinate by 1 <br>} <br>else if(key[KEY_LEFT])&nbsp;// Ditto' - only for left key <br>{ <br>&nbsp;&nbsp; my_pic_x --;&nbsp;// Moving left, so lower the X coordinate by 1 <br>}<br>else if(key[KEY_UP])&nbsp;// If the user hits the up key, change the picture's Y coordinate <br>{<br>&nbsp;&nbsp; my_pic_y --;&nbsp;// Moving up, so lower the Y coordinate by 1 <br>} <br>else if(key[KEY_DOWN])&nbsp;// Ditto' - only for down <br>{ <br>&nbsp;&nbsp; my_pic_y ++;&nbsp;// Moving down, so up the Y coordinate by 1 <br>}</div><p>Now, here is where the buffering comes into play. <br>As you can see, there are 3 lines of code. 2 regular lines, and 1 commented out. </p><p> draw_sprite(buffer, my_pic, my_pic_x, my_pic_y); <br>  blit(buffer, screen, 0,0,0,0,640,480); </p><p> //draw_sprite(screen, my_pic, my_pic_x, my_pic_y); </p><p> The first two lines do the buffering. <br>  If you comment out those two lines, and uncomment this line: </p><p> //draw_sprite(screen, my_pic, my_pic_x, my_pic_y); <br>  <br>  The program will run without buffering. </p><p> Here is how buffering works:<br>&nbsp; If you just draw everything to the screen, you will notice that you get a lot of flicker. This is because you are drawing <em>directly</em> to the screen, which is updated by the operating system at an unknown rate! Buffering gets rid of flicker because it minimizes direct drawing to the screen. If you draw each component onto the 'buffer', and then the complete screen sized buffer to the screen: flicker is eliminated since you draw everything at once in one pass. It's that simple. You will also notice, in the <em>unbuffered</em> mode, that the ball will zoom across the screen (if you have a relatively fast computer). Even in <em>buffered</em> mode, things can move pretty fast (or slow - again depending on the speed of your computer). This problem is fixed using timers, which will be explained in the next lesson, so don't worry about this for now.<br></p><div class="codeBox">&nbsp;draw_sprite(buffer, my_pic, my_pic_x, my_pic_y);//Draw the picture to the buffer <br>&nbsp;blit(buffer, screen, 0,0,0,0,640,480);//Draw the buffer to the screen <br>&nbsp;clear_bitmap(buffer); // Clear the contents of the buffer bitmap <p> &nbsp;/* Uncomment the following line, and comment out the 3 previous lines in order to view an <br>  &nbsp;&nbsp;*&nbsp;unbuffered mode &nbsp;of drawing. <br>  &nbsp;&nbsp;*/ <br>&nbsp;//draw_sprite(screen, my_pic, my_pic_x, my_pic_y); <br>  }</p></div><p>Do all of the program exit stuff. </p><div class="codeBox">&nbsp;destroy_bitmap(my_pic); // Release the bitmap data <br>&nbsp;destroy_bitmap(buffer); // Release the bitmap data <br>&nbsp;return 0; // Exit with no errors <br>} <br>END_OF_MAIN() // This must be called right after the closing bracket of your MAIN function.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is Allegro specific.</div><p>And that's it! Double-Buffering (bitmap buffering) is pretty easy, don't you think? Draw everything to the buffer, and then the buffer to the screen.</p><p>        <a href="alltut_lesson6.htm">Continue to Lesson 6</a><br>      <a href="alltut_index.htm">Back to the main page</a><br>      <br></p></div></div></center></body></html>