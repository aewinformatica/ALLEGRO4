<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Allegro Newbie Tutorial</title><link href="style1.css" rel="stylesheet" type="text/css"></head><body><center><div class="mainBox">  <div align="left">    <div class="borderBottom"><span class="headerText">Allegro Newbie Tutorial</span> : Lesson 2 - Bitmaps <br>      This lesson will initialize allegro, set up keyboard support, show an single bitmap, then wait for a keypress. Upon the keypress the program will then quit.</div>    </div>  <div align="left"><br>    Here is your first line. You  must include the allegro header file or else nothing will work!<br>    <br>    <div class="codeBox">#include &lt;allegro.h&gt; // You must include the Allegro Header file</div>    <br>     The generic main function.<br><br><div class="codeBox">int main(int argc, char *argv[]) <br>{ </div><br>Now we want to initialize allegro and set up keyboard support, just as we did in our last lesson.<br><br><div class="codeBox">allegro_init();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize Allegro <br>install_keyboard(); // Initialize keyboard routines</div><br>This next step is something new. When you actually draw bitmaps to the screen you must specify a color depth that the screen will have.<br><em>set_color_depth</em> will change the current color depth. <br>Available depths are <em>8,15,16, 24, </em>and<em> 32</em>. <br>A color depth of 8 requires a palette to be loaded with each bitmap, so we will not use it. <br>A color depth of 32 can use a lot of resources, so we will either use 15 or 16 in order to ensure maximum compatabiliy between machines.<br><br>Make sure that you change the color depth <strong>before</strong> you change the screen resolution. If you fail to do so, your bitmaps will not display with the correct colors!<br><br><div class="codeBox">set_color_depth(16); // Set the color depth<br>set_gfx_mode(GFX_AUTODETECT, 640,480,0,0); // Change our graphics mode to 640x480</div><br>This is the BITMAP structure. Every time you want to create an image to display, or to draw to, you must declare it with BITMAP, just like when you want an integer, you declare it with int. Since BITMAP in the allegro libarary is a <em>pointer, </em> every instance of a bitmap you create must be preceded by a *<br><br><div class="codeBox">BITMAP *my_pic = NULL; //Declare a BITMAP called my_pic, setting it to NULL </div><p>  Now, the bitmap my_pic is &quot;empty&quot;. In order to load a picture into it, you must call the function <em>load_bitmap</em>(); <br>  <br>  Next, we will load a bitmap image from the hard disk into the bitmap my_pic.<br>  Here are what the parameters mean:<br>  <em> &nbsp;&nbsp;&nbsp;load_bitmap(&quot;Location of the bitmap&quot;, palette);</em><br>    <br>    In place of the palette, we will pass NULL - meaning that no palette is needed when running a color mode greater than 8. We can't just call the function load_bitmap by itself, however.     We must specify that we are loading the bitmap into the memory of my_pic. It is done like so: (<em>note, the bitmap must actually exist at this location. If not, the program will crash when trying to load it</em>. <em>Functions exist to check for such errors, but they will be left out for now to keep this lesson ultra-simple</em>)<br></p><div class="codeBox">my_pic = load_bitmap(&quot;picture.bmp&quot;, NULL); // Load our picture</div><p>           Now that our bitmap is loaded into memory, we want to display it onto the screen. To do this we use a function called <em>blit</em>. Here are the parameters: <br>  &nbsp;&nbsp;&nbsp;    <em>blit</em>(bitmap to draw, destination bitmap (usually the screen), clip x, clip y, x position, y position, width, height); <br>    <br>    As you can see, <em>blit</em> offers a lot of functionality. The clipx and clipy will be the upper left hand corner of the bitmap that you want to copy. For instance, if you use 0,0 - you will get the bitmap from the top left corner exactly. However, if you use 50,50 - you will get the bitmap using the position 50,50 as the upper left hand corner. You also need to specity the width and height. This will allow you to clip the image from the other sides. Don't worry, we will demonstrate all the capabilities of blitting in the upcoming lessons. </p>  <p> Now, lets just display the entire bitmap in the upper left hand corner of the screen </p>  <div class="codeBox">blit(my_pic, screen, 0,0,0,0,480,360);//Draw the whole bitmap to the screen at (0,0)</div>  <p>We now want to wait for a keypress before we exit the program.<br>  </p>  <div class="codeBox">readkey();// Wait untill a key is pressed</div>  <p>           The next step is critical before exiting the program.<br>The <em>destroy_bitmap</em> function is used to clear out the space in memory that a bitmap was utilizing. <br><br>Make sure you destroy <em>all</em> bitmaps that you used in your program, so garbage data doesn't stay behind in memory.<br>  </p>  <div class="codeBox">destroy_bitmap(my_pic); //Release the bitmap data</div>  <p> Return 0 at the end of main, indicating a exit without errors<br>  </p>  <div class="codeBox">return 0; // Exit with no errors <br>}</div>  <p>           Call the allegro specific END_OF_MAIN() function.<br>  </p>  <div class="codeBox">END_OF_MAIN() // This must be called right after the closing bracket of your MAIN function. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // It is Allegro specific.</div>  <p>           This concludes Lesson 2. You now know how to set up an allegro environment and change the resolution of the screen and display a bitmap.<br>        <br>        <a href="../../downloads/alltut/lesson2.zip">Download Lesson 2 Source</a><br>        <a href="alltut_lesson3.htm">Continue to Lesson 3</a><br>        <a href="alltut_index.htm">Back to the main page</a><br>        <br>  </p>  </div></div></center></body></html>