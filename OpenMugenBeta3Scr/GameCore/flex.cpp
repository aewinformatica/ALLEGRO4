#line 2 "flex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 316
#define YY_END_OF_BUFFER 317
static yyconst short int yy_accept[1690] =
    {   0,
        0,    0,  317,  316,    4,    5,   21,  316,   19,   26,
       12,   13,   10,    8,    6,    9,  316,   11,    3,   15,
       14,   32,   29,   31,   17,   18,   28,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  313,
      314,   27,   25,    4,   30,    0,   16,   22,   20,    2,
        0,    3,   33,   34,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  132,    0,    0,    0,    0,    0,    0,  139,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   23,    1,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,
        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  197,    0,    0,    0,
        0,    0,    0,    0,  202,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  208,    0,    0,  211,    0,
       96,    0,    0,    0,    0,    0,   98,    0,  104,    0,
      105,    0,    0,    0,    0,    0,    0,  110,    0,    0,
        0,    0,  114,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  121,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  137,  141,    0,
        0,    0,    0,  151,    0,  272,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  216,    0,    0,
      303,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  274,    0,    0,  171,    0,
        0,  277,    0,    0,    0,  177,  178,    0,    0,    0,

      179,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  227,    0,
        0,  312,    0,    0,    0,  209,  210,    0,    0,    0,
        0,  311,  212,    0,    0,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  251,   88,  117,    0,    0,    0,    0,    0,
        0,    0,    0,  257,  258,    0,  260,    0,    0,    0,

        0,    0,  133,    0,    0,    0,   87,  217,    0,    0,
        0,  142,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      273,  159,    0,    0,  164,    0,  166,    0,  169,  170,
      223,    0,    0,    0,    0,  224,    0,    0,    0,    0,
        0,  280,    0,  282,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  188,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  290,    0,    0,    0,    0,    0,    0,    0,  201,
        0,    0,    0,    0,    0,    0,    0,    0,  304,    0,

      307,  308,  309,    0,  310,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  238,    0,    0,    0,    0,    0,    0,
        0,  111,  246,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  256,    0,    0,
        0,  126,  127,    0,    0,    0,    0,    0,    0,    0,
      266,  138,  267,    0,    0,  144,    0,    0,    0,    0,
      148,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   85,    0,    0,  279,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  186,    0,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  198,    0,
      293,    0,  200,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  225,  206,    0,    0,    0,    0,    0,
        0,  213,    0,    0,  229,  230,    0,  232,  233,   99,
        0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      115,  250,    0,    0,    0,  226,    0,    0,  122,    0,
      124,    0,    0,    0,    0,    0,    0,    0,    0,  130,
      131,    0,    0,  134,    0,  143,  268,    0,    0,    0,
        0,    0,    0,    0,    0,  149,  271,  152,    0,    0,
        0,    0,    0,    0,  162,  163,    0,    0,    0,    0,
      218,    0,    0,    0,    0,    0,    0,    0,    0,  283,
      180,  284,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  203,

      204,    0,   93,    0,    0,    0,    0,    0,    0,    0,
       86,  231,    0,    0,  102,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  123,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  265,
        0,    0,  145,    0,    0,    0,    0,    0,    0,    0,
      153,  154,    0,  157,  158,    0,    0,  167,    0,  220,
        0,    0,    0,    0,    0,    0,    0,  281,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  289,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  199,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  305,    0,    0,
        0,  215,  100,    0,    0,    0,  236,    0,  106,    0,
        0,    0,  240,    0,  109,  242,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
        0,    0,  262,  263,    0,    0,    0,    0,  136,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,

      278,    0,    0,    0,  285,    0,    0,    0,    0,  189,
      190,    0,  193,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      294,  295,  296,    0,    0,    0,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,  214,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  243,  244,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,  248,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  264,    0,    0,  135,    0,  146,  147,
        0,    0,    0,    0,    0,    0,    0,    0,  168,  221,

        0,    0,    0,    0,    0,    0,  176,    0,  182,  184,
      187,    0,  287,    0,  288,  194,  195,    0,    0,    0,
        0,    0,    0,    0,   53,    0,    0,    0,    0,   47,
       48,  291,    0,    0,    0,    0,  300,    0,    0,    0,
        0,  306,    0,    0,    0,    0,    0,  101,    0,    0,
      237,    0,  108,  239,  241,    0,    0,   37,    0,    0,
        0,    0,   43,    0,   41,    0,    0,    0,  253,    0,
        0,    0,  255,    0,    0,    0,  128,  129,  269,    0,
      270,    0,    0,    0,    0,  150,  160,  161,  219,    0,
      172,  173,  275,  276,    0,    0,    0,    0,  286,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  292,  297,    0,    0,  301,  302,    0,  207,    0,
        0,    0,    0,    0,    0,  235,    0,    0,    0,    0,
        0,    0,    0,    0,  247,    0,    0,  254,    0,  120,
        0,   89,  261,    0,    0,    0,    0,    0,  222,  175,
        0,    0,    0,  192,  196,   51,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  298,    0,    0,    0,
        0,    0,    0,    0,  228,    0,    0,  245,   40,    0,
        0,    0,    0,    0,    0,  252,    0,    0,   90,    0,
        0,    0,    0,  181,    0,    0,   52,    0,    0,    0,

        0,    0,   59,   60,    0,    0,    0,  299,  205,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   91,    0,    0,    0,   80,  183,
      185,    0,    0,    0,    0,   57,   58,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   54,    0,   49,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,    0,    0,
        0,    0,   39,    0,  119,    0,    0,    0,    0,   50,
        0,   56,   61,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   42,    0,  249,    0,    0,    0,
        0,   62,   63,    0,    0,    0,    0,    0,    0,    0,
        0,   66,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
       70,   68,   69,    0,    0,    0,   64,    0,    0,   45,
        0,   78,    0,    0,    0,    0,    0,    0,   71,    0,
        0,   65,   38,    0,    0,    0,    0,   55,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,   77,   75,
        0,   74,   79,    0,   81,   76,   73,   82,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   17,   17,   17,   17,   17,   22,   23,   24,
       25,   26,    1,    1,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       27,    1,   28,   29,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,    1,   57,    1,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[1691] =
    {   0,
        0,    0, 1735, 1736,   57, 1736, 1709, 1727, 1736, 1724,
     1736, 1736, 1720, 1736, 1736, 1736,   45, 1736,   52, 1736,
     1736, 1705, 1736, 1704, 1694, 1736, 1698, 1736,   42,   46,
       59,   64,   35,   65,   67,   41,   72, 1675,   79,   37,
       74, 1689,  108,   99,  116,  106, 1680,  100, 1684, 1736,
     1736, 1665, 1736,  118, 1736, 1715, 1736, 1736, 1736,  155,
      160,  167, 1736, 1736, 1689, 1736, 1670, 1673, 1667, 1668,
       94,  101, 1669,   93,  133, 1664, 1680, 1666, 1667, 1666,
     1670, 1677, 1672,  146, 1658, 1655,   51, 1655, 1672, 1650,
     1655,  110, 1655, 1651,  160, 1667, 1654, 1646, 1664, 1652,

     1643, 1736, 1657, 1654, 1652, 1652, 1644, 1651, 1736,  121,
      118,  158, 1643, 1635,  151, 1648, 1639,  164, 1638, 1637,
      161, 1625, 1736, 1648,  116,  166, 1634,  171,  170, 1629,
     1634,  160, 1641, 1626,  186, 1627, 1623,  174, 1640,  186,
      189, 1622, 1623, 1629,  182, 1625,  191, 1736,  219, 1616,
     1736, 1616, 1629, 1623, 1610, 1615, 1618, 1616, 1623, 1613,
     1621, 1611, 1623, 1615, 1611, 1620, 1616, 1601, 1606, 1603,
     1615, 1602, 1595, 1736, 1601, 1611, 1606, 1590, 1593, 1585,
     1588, 1594,  206, 1593, 1589, 1600, 1589, 1587, 1582, 1594,
     1590, 1575, 1580,  215, 1583, 1573,  197, 1586, 1585, 1586,

     1736, 1585, 1584, 1585, 1578, 1581, 1580, 1576, 1571,  219,
     1563, 1580, 1565, 1570, 1569, 1562, 1575, 1555, 1573, 1572,
      239, 1567, 1552, 1551, 1544,  248, 1563, 1545, 1556, 1561,
     1549, 1558, 1542, 1547, 1555, 1553, 1736, 1553, 1541, 1540,
     1535, 1538, 1548,  191, 1736, 1545, 1538, 1539, 1544, 1534,
     1540, 1532, 1540, 1527, 1522,  225,  246, 1522,  212, 1540,
     1736, 1522, 1518, 1533, 1536, 1531,  113, 1521, 1736, 1516,
     1736, 1530, 1517, 1526, 1518, 1509, 1523, 1736, 1520, 1508,
     1524, 1504, 1504, 1537, 1507, 1502, 1507, 1511, 1509, 1501,
     1499, 1500, 1508, 1494, 1506, 1505, 1489, 1736,  183, 1499,

     1498, 1501, 1501, 1479, 1488, 1497, 1500, 1478, 1498, 1490,
     1492, 1477, 1494, 1482, 1480, 1480, 1471,  237,  240, 1486,
     1481, 1482,  255, 1736, 1478, 1736,  190, 1481,  228, 1484,
     1479, 1470, 1478, 1462, 1474, 1457, 1465, 1476, 1463, 1462,
     1470, 1455, 1457, 1447, 1456, 1448, 1453, 1452, 1452, 1460,
     1455,  252,  145, 1459, 1444, 1456, 1442, 1440,  269, 1443,
     1435, 1438, 1451, 1450, 1448,  263, 1467, 1450, 1432, 1444,
     1429, 1429, 1424, 1444, 1439,  265, 1424,  272, 1423, 1434,
     1736, 1736, 1432, 1434, 1434, 1436, 1431,  245, 1431, 1413,
     1430, 1427, 1423, 1415, 1424, 1419, 1429, 1417, 1418, 1736,

     1412,  279,  269, 1414, 1418, 1401, 1409, 1401, 1414, 1411,
     1401, 1412, 1409, 1410, 1398, 1736, 1406,  298, 1407, 1394,
     1407, 1406, 1405, 1401, 1415, 1396, 1388, 1736, 1395, 1393,
     1394, 1397, 1388, 1376, 1375, 1376, 1389, 1736, 1371, 1385,
     1378, 1384, 1367, 1386, 1374, 1380, 1366, 1367, 1377, 1376,
     1372, 1375, 1377, 1372, 1361, 1366, 1353,  272, 1348, 1357,
     1350, 1361, 1364, 1363, 1342, 1346, 1360, 1348, 1351, 1344,
     1346, 1342, 1339, 1353, 1332, 1336, 1350, 1349, 1348, 1332,
     1346, 1345, 1345, 1339,  276, 1736, 1325, 1334, 1736, 1326,
     1324, 1736, 1340, 1324, 1327, 1736, 1736, 1336, 1334, 1318,

      293, 1317,  288, 1333, 1314, 1325, 1320, 1327, 1312, 1321,
      153, 1315, 1314, 1307,  320, 1312, 1316,  309, 1310, 1307,
     1321, 1303, 1300, 1304, 1309, 1301, 1315, 1300, 1736, 1309,
     1304, 1736, 1308, 1297, 1290, 1736, 1736, 1305, 1296, 1298,
     1286, 1736, 1736, 1287, 1291, 1736, 1290, 1295, 1295, 1296,
     1281, 1277, 1292, 1291, 1286, 1281, 1273, 1273,  287, 1277,
     1283, 1265,  298, 1273,  296, 1275, 1282, 1265,  216, 1279,
      307, 1262, 1268, 1266, 1271, 1263, 1263, 1272, 1251, 1250,
     1261, 1262, 1270, 1736, 1736, 1249, 1265, 1268, 1264, 1256,
     1253, 1243, 1239, 1736, 1736, 1249,  295, 1250, 1243, 1241,

     1248,  321, 1736, 1254, 1252, 1236, 1736, 1736, 1251, 1230,
     1233, 1736, 1239, 1232, 1235, 1227, 1243, 1233, 1245, 1225,
     1230, 1221, 1226, 1239, 1227, 1227, 1222, 1217, 1226, 1228,
     1736, 1736, 1230, 1259, 1736, 1212, 1736, 1226, 1736, 1736,
     1736, 1223, 1214, 1208, 1222, 1736, 1206,  321, 1206,  321,
     1220, 1736, 1218, 1736, 1218, 1220, 1215, 1218, 1204, 1203,
     1196, 1214, 1194, 1736, 1208, 1211, 1192, 1195,  321,  330,
     1200, 1207,  322, 1189,   12,   76,  224,  248,  293,  303,
      315, 1736,  320,  333,  332,  323,  345,  349,  333, 1736,
      350,  349,  351,  352,  342,  355,  342,  341, 1736,  360,

     1736, 1736, 1736,  343, 1736,  359,  363,  369,  359,  349,
      370,  374,  364,  357,  365,  360,  375,  366,  366,  374,
      363,  384,  381, 1736,  386,  373,  388,  368,  377,  372,
      384, 1736, 1736,  376,  375,  390,  385,  383,  398,  380,
      416,  397,  403,  393,  393,  388,  388,  404,  405,  402,
      393,  408,  398,  408,  411,  412,  417, 1736,  399,  400,
      416,  418,  405,  419,  420,  402,  423,  425,  412,  426,
     1736, 1736, 1736,  427,  413, 1736,  429,  411,  416,  420,
      423,  422,  438,  439,  420,  421,  432,  443,  435,  441,
      446,  443,  429,  430,  442,  449,  440,  441,  442,  459,

      454,  463, 1736,  461,  445, 1736,  441,  464,  445,  450,
      451,  469,  453,  465,  457,  456,  453,  466,  459, 1736,
      456,  480,  467,  468,  471,  465,  468,  467,  487,  474,
      489,  487,  477,  492,  491,  492,  478,  491, 1736,  483,
     1736,  479, 1736,  492,  484,  502,  495,  490,  486,  502,
      503,  504,  492, 1736, 1736,  524,  513,  502,  513,  494,
      515, 1736,  514,  517, 1736, 1736,  500, 1736, 1736,  510,
      506, 1736,  524,  523,  510,  519,  519,  531,  516,  521,
      519,  533,  530,  539,  525,  532,  542,  539,  533,  545,
      529,  532,  544,  546,  546,  534,  532,  533,  550,  541,

     1736, 1736,  543,  550,  555, 1736,  555,  560, 1736,  544,
      547,  544,  547,  565,  562,  563,  560,  550,  556, 1736,
     1736,  552,  564, 1736,  573, 1736, 1736,  557,  560,  576,
      574,  574,  575,  596,  564, 1736, 1736, 1736,  579,  566,
      580,  582,  567,  569, 1736, 1736,  573,  575,  566,  572,
     1736,  592,  574,  577,  577,  579,  593,  580,  595, 1736,
     1736, 1736,  596,  597,  602,  592,  601,  597,  591,  604,
      635,  601,  591,  591,  594,  609,  610,  631,  616,  595,
      598,  616,  614,  637,  613,  620,  624,  625,  618, 1736,
      623,  610,  616,  616,  629,  627,  611,  634,  624, 1736,

     1736,  618,  651,  631,  629,  632,  627,  662,  645,  644,
     1736, 1736,  635,  642, 1736,  640,  650,  634,  636,  651,
      642,  649,  654,  640,  654,  644,  650,  644,  663,  645,
      664,  654,  684,  650,  667,  667,  670,  659, 1736,  664,
      663,  665,  666,  676,  676,  680,  680,  681,  670, 1736,
      681,  669,  669,  676,  670,  679,  688,  684,  672, 1736,
      676,  683, 1736,  685,  695,  694,  682,  682,  701,  684,
     1736, 1736,  687, 1736, 1736,  686,  702, 1736,  692, 1736,
      690,  709,  702,  692,  712,  690,  707, 1736,  702,  705,
      715,  714,  716,  709,  711,  719,  703,  706,  724,  716,

      758,  709, 1736,  732,  732,  751,  723,  754,  732,  725,
      757,  728,  732,  733,  726,  728,  743,  745,  734,  742,
      747,  748,  734,  754,  751,  745,  737, 1736,  754,  759,
      741,  742, 1736,  750,  755,  756, 1736,  761, 1736,  763,
      749,  756, 1736,  766, 1736,  783,  769,  760,  769,  767,
      776,  776,  765,  798,  766,  777,  763,  773,  783,  770,
      784,  779,  772,  782,  793,  780,  787,  788,  780, 1736,
      790,  799, 1736, 1736,  796,  789,  798,  784, 1736,  790,
      786,  803,  789,  804,  801,  793,  792,  812,  809, 1736,
      841, 1736,  811,  797,  806,  812,  846,  817,  817,  814,

     1736,  809,  805,  806, 1736,  823,  823,  814,  824, 1736,
     1736,  811, 1736,  828,  809,  826,  835,  819,  827,  824,
      836,  825,  822,  828,  843,  822,  841,  843,  824,  845,
     1736, 1736, 1736,  837,  851,  835,  849,  851,  851,  854,
     1736,  844,  839,  851,  840,  841,  862, 1736,  855,  860,
      850,  866,  848,  844,  850,  851,  852, 1736, 1736,  872,
      867, 1736,  870,  871,  872,  859,  860,  865,  867,  867,
     1736,  878, 1736,  875,  876,  881,  884,  884,  870,  877,
      872,  873,  886, 1736,  889,  877, 1736,  892, 1736, 1736,
      888,  878,  881,  885,  900,  899,  899,  880, 1736, 1736,

      894,  899,  884,  906,  891,  893, 1736,  904,  894,  895,
     1736,  912, 1736,  912, 1736, 1736, 1736,  899,  916,  905,
      936,  916,  938,  909, 1736,  906,  906,  912,  913, 1736,
     1736, 1736,  909,  923,  927,  931, 1736,  929,  914,  920,
      916, 1736,  919,  925,  925,  928,  928, 1736,  940,  931,
     1736,  940, 1736, 1736, 1736,  927,  934, 1736,  941,  930,
      933,  941, 1736,  966, 1736,  932,  937,  941, 1736,  944,
      931,  937, 1736,  949,  939,  955, 1736, 1736, 1736,  942,
     1736,  952,  942,  950,  962, 1736, 1736, 1736, 1736,  946,
     1736, 1736, 1736, 1736,  947,  955,  960,  961, 1736,  967,

      952,  962,  960,  971,  970,  975,  959,  994,  960,  963,
      977, 1736, 1736,  980,  981, 1736, 1736,  972, 1736,  977,
      972, 1004,  979,  986,  977, 1736,  984,  990,  990,  991,
      978,  997,  980,  980, 1736,  999,  997, 1736,  999, 1736,
      985, 1736, 1736,  985,  985, 1004, 1004, 1004, 1736, 1736,
     1005,  998,  999, 1736, 1736, 1736,  993, 1006,  997, 1016,
     1000, 1034,  996, 1021, 1020, 1018, 1736, 1021, 1022, 1006,
     1043, 1027, 1009, 1046, 1736, 1031, 1015, 1736, 1736, 1021,
     1027, 1019, 1018, 1030, 1025, 1736, 1032, 1022, 1736, 1030,
     1036, 1060, 1034, 1736, 1042, 1043, 1736, 1030, 1045, 1048,

     1037, 1029, 1736, 1736, 1052, 1055, 1038, 1736, 1736, 1045,
     1057, 1059, 1038, 1049, 1062, 1047, 1046, 1064, 1050, 1059,
     1063, 1060, 1073, 1056, 1736, 1060, 1092, 1072, 1736, 1736,
     1736, 1059, 1060, 1070, 1068, 1736, 1736, 1072, 1072, 1080,
     1070, 1086, 1065, 1084, 1087, 1087, 1076, 1092, 1071, 1091,
     1736, 1091, 1077, 1084, 1085, 1095, 1083, 1082, 1118, 1098,
     1087, 1736, 1121, 1736, 1087, 1123, 1104, 1090, 1126, 1109,
     1109, 1093, 1104, 1131, 1132, 1115, 1115, 1736, 1120, 1112,
     1107, 1119, 1736, 1120, 1736, 1117, 1108, 1118, 1104, 1736,
     1126, 1736, 1736, 1130, 1122, 1149, 1150, 1152, 1114, 1139,

     1129, 1157, 1130, 1132, 1736, 1142, 1736, 1143, 1128, 1141,
     1148, 1736, 1736, 1143, 1152, 1131, 1150, 1171, 1133, 1134,
     1135, 1736, 1736, 1160, 1139, 1178, 1140, 1144, 1162, 1143,
     1159, 1156, 1167, 1151, 1153, 1170, 1170, 1154, 1152, 1736,
     1736, 1736, 1736, 1174, 1174, 1155, 1736, 1168, 1176, 1736,
     1175, 1736, 1163, 1175, 1165, 1175, 1202, 1203, 1736, 1178,
     1205, 1736, 1736, 1167, 1184, 1184, 1179, 1736, 1210, 1172,
     1173, 1213, 1175, 1736, 1180, 1186, 1188, 1179, 1736, 1736,
     1180, 1736, 1736, 1191, 1736, 1736, 1736, 1736, 1736, 1235
    } ;

static yyconst short int yy_def[1691] =
    {   0,
     1689,    1, 1689, 1689, 1689, 1689, 1689, 1690, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1690, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,    0, 1689
    } ;

static yyconst short int yy_nxt[1795] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   19,   19,   19,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       28,   39,   40,   41,   42,   43,   28,   44,   45,   46,
       47,   48,   49,   50,   51,   28,   52,   53,   54,  830,
       54,   60,   60,   60,   60,   60,   61,  111,   62,   62,
       62,   62,   62,   67,   68,  100,   77,   69,   90,  101,
       70,  112,   78,   71,   79,   72,  177,   73,   91,   80,
       74,   75,   76,   81,   86,   92,   82,   97,   87,  178,

       83,   98,   88,   84,  113,  102,   93,  103,   85,   94,
      831,   89,   95,  107,   99,  104,   96,  108,  114,   54,
      105,   54,  109,  110,  115,  117,  118,  119,  120,  127,
      145,  160,  155,  128,  146,  156,  138,  157,  121,  158,
      139,  161,  183,  129,  140,  122,  123,  403,  130,  124,
      131,  184,  125,  141,  132,  126,  142,  201,  203,  133,
      143,  134,  404,  162,  226,  135,  136,  204,  227,  202,
      137,   60,   60,   60,   60,   60,  149,  149,  149,  149,
      149,   61,  163,   62,   62,   62,   62,   62,  172,  173,
      187,  205,  209,  210,  174,  213,  668,  214,  496,  497,

      228,  669,  221,  237,  188,  215,  216,  217,  222,  206,
      229,  223,  218,  231,  233,  238,  241,  245,  248,  250,
      234,  246,  232,  255,  258,  432,  373,  251,  249,  256,
      242,  314,  433,  467,  259,  149,  149,  149,  149,  149,
      291,  315,  374,  468,  292,  303,  304,  305,  306,  388,
      307,  353,  394,  327,  734,  385,  328,  395,  470,  308,
      309,  396,  832,  310,  329,  735,  311,  452,  330,  341,
      342,  343,  386,  387,  344,  471,  389,  345,  354,  453,
      455,  346,  347,  355,  348,  454,  494,  460,  390,  456,
      391,  461,  462,  513,  392,  833,  356,  463,  536,  537,

      495,  503,  464,  504,  465,  505,  506,  524,  527,  550,
      554,  514,  551,  525,  528,  615,  616,  643,  659,  644,
      720,  552,  555,  655,  766,  760,  729,  553,  569,  721,
      834,  570,  660,  571,  572,  656,  573,  737,  574,  575,
      761,  657,  684,  725,  730,  726,  576,  727,  738,  577,
      673,  835,  685,  674,  801,  821,  675,  676,  686,  804,
      827,  823,  677,  836,  837,  678,  805,  838,  679,  767,
      822,  828,  802,  680,  681,  824,  839,  840,  841,  842,
      843,  844,  851,  845,  852,  846,  853,  854,  855,  856,
      857,  847,  860,  858,  861,  848,  859,  862,  849,  863,

      864,  850,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  876,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  915,  931,  932,  916,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  948,  950,  951,  952,  953,
      954,  949,  955,  956,  957,  958,  959,  960,  961,  962,

      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  982,
      984,  985,  986,  987,  988,  989,  990,  983,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1003, 1003, 1003, 1003, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1004, 1015, 1016, 1017, 1018, 1014,
     1019, 1020, 1021, 1023, 1022, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,

     1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
     1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
     1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1003, 1003, 1003,
     1003, 1003, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,

     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1168, 1167, 1169, 1170, 1171, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1189, 1186, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1187,
     1206, 1207, 1208, 1209, 1212, 1188, 1210, 1211, 1213, 1214,
     1199, 1215, 1216, 1217, 1219, 1220, 1221, 1218, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1245, 1256,

     1257, 1258, 1239, 1259, 1260, 1261, 1246, 1262, 1263, 1264,
     1265, 1247, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1329, 1330, 1328, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,

     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,

     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1462, 1463, 1464,
     1461, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1474,
     1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
     1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
     1495, 1496, 1497, 1473, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1514,
     1515, 1516, 1513, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
     1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1545,
     1546, 1547, 1543, 1548, 1550, 1551, 1552, 1549, 1553, 1554,

     1544, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1608, 1610, 1611, 1612, 1613, 1614,
     1609, 1615, 1618, 1619, 1620, 1616, 1621, 1622, 1623, 1626,
     1624, 1627, 1628, 1617, 1625, 1629, 1630, 1631, 1632, 1633,
     1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
     1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,

     1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
     1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1687, 1688,   56,  829,  826,  825,  820,
      819,  818,  817,  816,  815,  814,  813,  812,  811,  810,
      809,  808,  807,  806,  803,  800,  799,  798,  797,  796,
      795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  765,  764,
      763,  762,  759,  758,  757,  756,  755,  754,  753,  752,

      751,  750,  749,  748,  747,  746,  745,  744,  743,  742,
      741,  740,  739,  736,  733,  732,  731,  728,  724,  723,
      722,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  683,  682,  672,  671,  670,  667,
      666,  665,  664,  663,  662,  661,  658,  654,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,

      619,  618,  617,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  535,  534,  533,  532,  531,
      530,  529,  526,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  512,  511,  510,  509,  508,  507,  502,  501,
      500,  499,  498,  493,  492,  491,  490,  489,  488,  487,

      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  469,  466,  459,  458,  457,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  402,  401,  400,  399,  398,
      397,  393,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  352,  351,

      350,  349,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  313,  312,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  257,  254,  253,  252,
      247,  244,  243,  240,  239,  236,  235,  230,  225,  224,
      220,  219,  212,  211,  208,  207,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  186,  185,

      182,  181,  180,  179,  176,  175,  171,  170,  169,  168,
      167,  166,  165,  164,  159,  154,  153,  152,  151,  150,
       57,  148,  147,  144,  116,  106,   66,   65,   64,   63,
       59,   58,   57,   55, 1689,    3, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689

    } ;

static yyconst short int yy_chk[1795] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,  675,
        5,   17,   17,   17,   17,   17,   19,   40,   19,   19,
       19,   19,   19,   29,   29,   36,   30,   29,   33,   36,
       29,   40,   30,   29,   30,   29,   87,   29,   33,   31,
       29,   29,   29,   31,   32,   34,   31,   35,   32,   87,

       31,   35,   32,   31,   41,   37,   34,   37,   31,   34,
      676,   32,   34,   39,   35,   37,   34,   39,   41,   54,
       37,   54,   39,   39,   41,   43,   43,   43,   43,   44,
       48,   74,   71,   44,   48,   71,   46,   72,   43,   72,
       46,   74,   92,   44,   46,   43,   43,  267,   45,   43,
       45,   92,   43,   46,   45,   43,   46,  110,  111,   45,
       46,   45,  267,   75,  125,   45,   45,  111,  125,  110,
       45,   60,   60,   60,   60,   60,   61,   61,   61,   61,
       61,   62,   75,   62,   62,   62,   62,   62,   84,   84,
       95,  112,  115,  115,   84,  118,  511,  118,  353,  353,

      126,  511,  121,  132,   95,  118,  118,  118,  121,  112,
      126,  121,  118,  128,  129,  132,  135,  138,  140,  141,
      129,  138,  128,  145,  147,  299,  244,  141,  140,  145,
      135,  197,  299,  327,  147,  149,  149,  149,  149,  149,
      183,  197,  244,  327,  183,  194,  194,  194,  194,  257,
      194,  226,  259,  210,  569,  256,  210,  259,  329,  194,
      194,  259,  677,  194,  210,  569,  194,  318,  210,  221,
      221,  221,  256,  256,  221,  329,  257,  221,  226,  318,
      319,  221,  221,  226,  221,  318,  352,  323,  257,  319,
      257,  323,  323,  366,  257,  678,  226,  323,  388,  388,

      352,  359,  323,  359,  323,  359,  359,  376,  378,  402,
      403,  366,  402,  376,  378,  458,  458,  485,  503,  485,
      559,  402,  403,  501,  602,  597,  565,  402,  418,  559,
      679,  418,  503,  418,  418,  501,  418,  571,  418,  418,
      597,  501,  518,  563,  565,  563,  418,  563,  571,  418,
      515,  680,  518,  515,  648,  669,  515,  515,  518,  650,
      673,  670,  515,  681,  683,  515,  650,  684,  515,  602,
      669,  673,  648,  515,  515,  670,  685,  686,  687,  688,
      689,  691,  692,  691,  693,  691,  694,  695,  696,  697,
      698,  691,  704,  700,  706,  691,  700,  707,  691,  708,

      709,  691,  710,  711,  712,  713,  714,  715,  716,  717,
      718,  719,  720,  721,  722,  723,  725,  726,  727,  728,
      729,  730,  731,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  742,  743,  744,  745,  746,  747,  748,  749,
      750,  751,  752,  753,  754,  755,  756,  757,  759,  760,
      761,  762,  763,  764,  765,  766,  766,  767,  768,  769,
      770,  774,  775,  777,  778,  779,  762,  780,  781,  762,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  790,
      791,  792,  793,  793,  794,  795,  796,  797,  798,  799,
      800,  795,  801,  802,  804,  805,  807,  808,  809,  810,

      811,  812,  813,  814,  815,  816,  817,  818,  819,  821,
      822,  823,  824,  825,  826,  827,  828,  829,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  831,  840,  842,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      856,  856,  856,  856,  856,  857,  858,  859,  860,  861,
      863,  864,  867,  870,  856,  871,  873,  874,  875,  870,
      876,  877,  878,  879,  878,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  903,  904,  905,  907,
      908,  910,  911,  912,  913,  914,  915,  916,  917,  918,

      919,  922,  923,  925,  928,  929,  930,  931,  932,  933,
      934,  935,  939,  940,  941,  942,  943,  944,  947,  948,
      949,  950,  952,  953,  954,  955,  956,  957,  958,  959,
      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  991,  992,  993,
      994,  995,  996,  997,  998,  999, 1002, 1003, 1003, 1003,
     1003, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013,
     1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,

     1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1048, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1061, 1062, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1069, 1073, 1076, 1077, 1079, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1069,
     1093, 1094, 1095, 1096, 1098, 1069, 1097, 1097, 1099, 1100,
     1085, 1101, 1102, 1104, 1105, 1106, 1107, 1104, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130,
     1131, 1132, 1134, 1135, 1136, 1138, 1140, 1141, 1130, 1142,

     1144, 1146, 1124, 1147, 1148, 1149, 1130, 1150, 1151, 1152,
     1153, 1130, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172,
     1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209,
     1212, 1214, 1215, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1225, 1228, 1229, 1230,
     1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244,
     1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255,

     1256, 1257, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1285, 1286, 1288, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1298, 1298, 1301, 1302, 1303, 1303, 1304,
     1305, 1306, 1308, 1309, 1310, 1312, 1314, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1333, 1334,
     1335, 1336, 1338, 1339, 1340, 1341, 1343, 1344, 1345, 1346,
     1347, 1349, 1350, 1352, 1356, 1357, 1359, 1360, 1361, 1362,
     1364, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1375, 1376,
     1380, 1382, 1383, 1384, 1385, 1390, 1395, 1396, 1397, 1398,

     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1406, 1410, 1411, 1414, 1415, 1418, 1420, 1421, 1422, 1423,
     1424, 1425, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
     1436, 1437, 1439, 1441, 1444, 1445, 1446, 1447, 1448, 1451,
     1452, 1453, 1457, 1422, 1458, 1459, 1460, 1461, 1462, 1463,
     1463, 1464, 1465, 1466, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1476, 1472, 1477, 1480, 1481, 1482, 1483, 1484, 1485,
     1487, 1488, 1490, 1491, 1492, 1493, 1495, 1496, 1498, 1499,
     1500, 1501, 1502, 1502, 1505, 1506, 1507, 1510, 1511, 1512,
     1513, 1514, 1511, 1515, 1516, 1517, 1518, 1515, 1519, 1520,

     1511, 1521, 1522, 1523, 1524, 1526, 1527, 1528, 1532, 1533,
     1534, 1535, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1561, 1563, 1565, 1566, 1567, 1568,
     1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1579,
     1580, 1581, 1582, 1584, 1586, 1587, 1588, 1589, 1589, 1591,
     1586, 1594, 1595, 1596, 1597, 1594, 1598, 1599, 1599, 1601,
     1600, 1602, 1603, 1594, 1600, 1604, 1606, 1608, 1609, 1610,
     1611, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1621,
     1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,

     1634, 1635, 1636, 1637, 1638, 1639, 1644, 1645, 1646, 1648,
     1649, 1651, 1653, 1654, 1655, 1656, 1657, 1658, 1660, 1661,
     1664, 1665, 1666, 1667, 1669, 1670, 1671, 1672, 1673, 1675,
     1676, 1677, 1678, 1681, 1684, 1690,  674,  672,  671,  668,
      667,  666,  665,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  653,  651,  649,  647,  645,  644,  643,  642,
      638,  636,  634,  633,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  611,  610,  609,  606,  605,  604,  601,  600,
      599,  598,  596,  593,  592,  591,  590,  589,  588,  587,

      586,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  570,  568,  567,  566,  564,  562,  561,
      560,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  545,  544,  541,  540,  539,  538,  535,
      534,  533,  531,  530,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  517,  516,  514,  513,  512,  510,
      509,  508,  507,  506,  505,  504,  502,  500,  499,  498,
      495,  494,  493,  491,  490,  488,  487,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,

      461,  460,  459,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      417,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  401,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  387,  386,  385,  384,  383,
      380,  379,  377,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  365,  364,  363,  362,  361,  360,  358,  357,
      356,  355,  354,  351,  350,  349,  348,  347,  346,  345,

      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  328,  325,  322,  321,  320,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  277,  276,  275,
      274,  273,  272,  270,  268,  266,  265,  264,  263,  262,
      260,  258,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  243,  242,  241,  240,  239,  238,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  225,  224,

      223,  222,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  209,  208,  207,  206,  205,  204,  203,  202,
      200,  199,  198,  196,  195,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  182,  181,  180,  179,  178,
      177,  176,  175,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  154,  153,  152,  150,  146,  144,  143,  142,
      139,  137,  136,  134,  133,  131,  130,  127,  124,  122,
      120,  119,  117,  116,  114,  113,  108,  107,  106,  105,
      104,  103,  101,  100,   99,   98,   97,   96,   94,   93,

       91,   90,   89,   88,   86,   85,   83,   82,   81,   80,
       79,   78,   77,   76,   73,   70,   69,   68,   67,   65,
       56,   52,   49,   47,   42,   38,   27,   25,   24,   22,
       13,   10,    8,    7,    3, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "LexerRules.txt"
#define INITIAL 0
#line 2 "LexerRules.txt"
#include <io.h>
#include <stdio.h>
#include <string.h>
#include "token.h"
#include "lex.h"
#ifdef MSVC
#define  isatty _isatty  // for some reason isatty is called _isatty in VC..
#endif

void DestroyComment();
void CopyString();
void CopyID();
int  CharToInt();	

int nLineNr=1;

#line 1330 "flex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 30 "LexerRules.txt"

#line 1479 "flex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1690 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1736 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 32 "LexerRules.txt"
case 2:
#line 33 "LexerRules.txt"
case 3:
YY_RULE_SETUP
#line 33 "LexerRules.txt"
{sscanf(yytext,"%f",&yylval.nFloat); 
				     return NUMBER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 37 "LexerRules.txt"
{/*NOTHING*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "LexerRules.txt"
{nLineNr++;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "LexerRules.txt"
return ',';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 42 "LexerRules.txt"
{/**/}     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "LexerRules.txt"
return '+';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 45 "LexerRules.txt"
return '-';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "LexerRules.txt"
return '*';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 47 "LexerRules.txt"
return '/';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "LexerRules.txt"
return '(';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "LexerRules.txt"
return ')';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 50 "LexerRules.txt"
{DestroyComment();}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 51 "LexerRules.txt"
return ':';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 52 "LexerRules.txt"
{CopyString();return STRING;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 53 "LexerRules.txt"
return '[';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 54 "LexerRules.txt"
return ']';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "LexerRules.txt"
return MOD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "LexerRules.txt"
return SQUARE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "LexerRules.txt"
return LOGNOT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "LexerRules.txt"
return LOGAND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "LexerRules.txt"
return LOGOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "LexerRules.txt"
return LOGXOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "LexerRules.txt"
return NOT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "LexerRules.txt"
return AND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "LexerRules.txt"
return OR;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "LexerRules.txt"
return XOR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 69 "LexerRules.txt"
return EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 70 "LexerRules.txt"
return NOTEQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 71 "LexerRules.txt"
return GREATER;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 72 "LexerRules.txt"
return LESS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 73 "LexerRules.txt"
return LESSEQUAL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 74 "LexerRules.txt"
return GREATEREQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "LexerRules.txt"
return LIFE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "LexerRules.txt"
return ATTACK;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "LexerRules.txt"
return DEFENCE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 80 "LexerRules.txt"
return FALLDEFUP;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 82 "LexerRules.txt"
return LIEDOWTIME;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 83 "LexerRules.txt"
return AIRJUGGLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 84 "LexerRules.txt"
return SPARKNO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 85 "LexerRules.txt"
return GUARDSPARKNO;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 86 "LexerRules.txt"
return KOECHO;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 87 "LexerRules.txt"
return VOLUME;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 88 "LexerRules.txt"
return INTEGERINDEX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 89 "LexerRules.txt"
return FLOATINDEX;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "LexerRules.txt"
return XSCALE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "LexerRules.txt"
return YSCALE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "LexerRules.txt"
return GROUNDBACK;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "LexerRules.txt"
return GROUNDFRONT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "LexerRules.txt"
return AIRBACK;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "LexerRules.txt"
return AIRFRONT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "LexerRules.txt"
return HEIGHT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "LexerRules.txt"
return ATTACKDIST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "LexerRules.txt"
return PROJATTDIST;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "LexerRules.txt"
return PROJDOSCALE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "LexerRules.txt"
return HEADPOSX;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "LexerRules.txt"
return HEADPOSY;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 106 "LexerRules.txt"
return MIDPOSX;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 107 "LexerRules.txt"
return MIDPOSY;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "LexerRules.txt"
return SHADOWOFFSET;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "LexerRules.txt"
return DRAWOFFSETX;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "LexerRules.txt"
return DRAWOFFSETY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 115 "LexerRules.txt"
return WALKFWD;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 116 "LexerRules.txt"
return WALKBACK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "LexerRules.txt"
return RUNFWDX;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "LexerRules.txt"
return RUNFWDY;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "LexerRules.txt"
return RUNBACKX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "LexerRules.txt"
return RUNBACKY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "LexerRules.txt"
return JUMPNEU;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "LexerRules.txt"
return JUMPBACK;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "LexerRules.txt"
return JUMPFWD;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "LexerRules.txt"
return RUNJUMPBACK;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "LexerRules.txt"
return RUNJUMPFWD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "LexerRules.txt"
return AIRJUMPNEU;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "LexerRules.txt"
return AIRJUMPBACK;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "LexerRules.txt"
return AIRJUMPFWD;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "LexerRules.txt"
return AIRJUMPNUM;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "LexerRules.txt"
return AIRJUMPHEIGHT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "LexerRules.txt"
return YACCEL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "LexerRules.txt"
return STANDFRICTION;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "LexerRules.txt"
return CROUCHFRICTION;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "LexerRules.txt"
return STATEDEF;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "LexerRules.txt"
return TYPE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "LexerRules.txt"
return PHYSICS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "LexerRules.txt"
{}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "LexerRules.txt"
return JUGGLE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "LexerRules.txt"
return FACEP2;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "LexerRules.txt"
return HITDEFPERSIST;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "LexerRules.txt"
return MOVEHITPERSIST;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "LexerRules.txt"
return HITCOUNTPERSIST;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "LexerRules.txt"
return STATE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "LexerRules.txt"
sscanf(yytext,"trigger%f",&yylval.nFloat);return TRIGGER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "LexerRules.txt"
return TRIGGERALL;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 159 "LexerRules.txt"
return ABS;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 160 "LexerRules.txt"
return ACOS;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 161 "LexerRules.txt"
return ALIVE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 162 "LexerRules.txt"
return ANIM;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 163 "LexerRules.txt"
return ANIMELEM;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 164 "LexerRules.txt"
return ANIMELEMNO;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 165 "LexerRules.txt"
return ANIMELEMTIME;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 166 "LexerRules.txt"
return ANIMEXIST;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 167 "LexerRules.txt"
return ANIMTIME;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 168 "LexerRules.txt"
return ASIN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "LexerRules.txt"
return ATAN;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 170 "LexerRules.txt"
return AUTHORNAME;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 171 "LexerRules.txt"
return BACKEEDGEBODYDIST;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 172 "LexerRules.txt"
return BACKEDGEDIST;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 173 "LexerRules.txt"
return CANRECOVER;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 174 "LexerRules.txt"
return CEIL;		
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 175 "LexerRules.txt"
return COMMAND;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 176 "LexerRules.txt"
return CONST;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 177 "LexerRules.txt"
return COS;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 178 "LexerRules.txt"
return CTRL;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 179 "LexerRules.txt"
return DRAWGAME;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 180 "LexerRules.txt"
return EXP;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 181 "LexerRules.txt"
return FACING;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "LexerRules.txt"
return FLOOR;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 183 "LexerRules.txt"
return FRONTEDGEBODYDIST;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "LexerRules.txt"
return FRONTEDGEDIST;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "LexerRules.txt"
return FVAR;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "LexerRules.txt"
return GAMETIME;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "LexerRules.txt"
return GETHITVAR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "LexerRules.txt"
return HITCOUNT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "LexerRules.txt"
return HITDEFATTR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "LexerRules.txt"
return HITFALL;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "LexerRules.txt"
return HITOVER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 192 "LexerRules.txt"
return HITPAUSETIME;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "LexerRules.txt"
return HITSHAKEOVER;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "LexerRules.txt"
return HITVELX;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "LexerRules.txt"
return HITVELY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "LexerRules.txt"
return PLID;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "LexerRules.txt"
return IFELSE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "LexerRules.txt"
return ISHELPER;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "LexerRules.txt"
return INGUARDDIST;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "LexerRules.txt"
return ISHOMETEAM;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "LexerRules.txt"
return LIFE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "LexerRules.txt"
return LIFEMAX;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "LexerRules.txt"
return LN;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "LexerRules.txt"
return LOG;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "LexerRules.txt"
return LOSE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "LexerRules.txt"
return LOSEKO;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "LexerRules.txt"
return LOSETIME;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "LexerRules.txt"
return MATCHNO;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "LexerRules.txt"
return MATCHOVER;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "LexerRules.txt"
return MOVECONTACT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 211 "LexerRules.txt"
return MOVEGUARDED;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "LexerRules.txt"
return MOVEHIT;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 213 "LexerRules.txt"
return MOVETYPE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "LexerRules.txt"
return MOVEREVERSED;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 215 "LexerRules.txt"
return NAME;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "LexerRules.txt"
return NUMENEMY;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "LexerRules.txt"
return NUMEXPLOD;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "LexerRules.txt"
return NUMHELPER;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 219 "LexerRules.txt"
return NUMPARTNER;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 220 "LexerRules.txt"
return NUMPROJ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 221 "LexerRules.txt"
return NUMPROJID;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 222 "LexerRules.txt"
return NUMTARGET;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "LexerRules.txt"
return P1NAME;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 224 "LexerRules.txt"
return P2BODYDISTX;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "LexerRules.txt"
return P2BODYDISTY;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "LexerRules.txt"
return P2DISTX;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "LexerRules.txt"
return P2DISTY;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "LexerRules.txt"
return P2LIFE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "LexerRules.txt"
return P2MOVETYPE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "LexerRules.txt"
return P2NAME;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "LexerRules.txt"
return P2STATENO;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 232 "LexerRules.txt"
return P2STATETYP;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "LexerRules.txt"
return P3NAME;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "LexerRules.txt"
return P4NAME;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "LexerRules.txt"
return PALNO;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "LexerRules.txt"
return PARENTDISTX;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "LexerRules.txt"
return PARENTDISTY;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "LexerRules.txt"
return PI;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "LexerRules.txt"
return PLAYERIDEXIST;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "LexerRules.txt"
return PREVSTATENO;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 241 "LexerRules.txt"
return POSX;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "LexerRules.txt"
return POSY;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "LexerRules.txt"
return POWER;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 244 "LexerRules.txt"
return POWERMAX;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 245 "LexerRules.txt"
return PROJCANCLETIME;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 246 "LexerRules.txt"
return PROJCONTACT;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 247 "LexerRules.txt"
return PROJCONTACTTIME;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 248 "LexerRules.txt"
return PROJGUARDED;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "LexerRules.txt"
return PROJGUARDEDTIME;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 250 "LexerRules.txt"
return PROJHIT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "LexerRules.txt"
return PROJHITTIME;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 252 "LexerRules.txt"
return RANDOM;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "LexerRules.txt"
return ROOTDISTX;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 254 "LexerRules.txt"
return ROOTDISTY;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 255 "LexerRules.txt"
return ROUNDNO;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 256 "LexerRules.txt"
return ROUNDSEXISTED;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 257 "LexerRules.txt"
return ROUNDSTATE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 258 "LexerRules.txt"
return SCREENPOSX;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 259 "LexerRules.txt"
return SCREENPOSY;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 260 "LexerRules.txt"
return SELFANIMEXIST;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 261 "LexerRules.txt"
return SIN;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 262 "LexerRules.txt"
return STATENO;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 263 "LexerRules.txt"
return STATETYPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 264 "LexerRules.txt"
return SYSFVAR;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 265 "LexerRules.txt"
return SYSVAR;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 266 "LexerRules.txt"
return TAN;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 267 "LexerRules.txt"
return TEAMMODE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 268 "LexerRules.txt"
return TEAMSIDE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 269 "LexerRules.txt"
return TICKSPERSECOND;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 270 "LexerRules.txt"
return TIMEMODE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 271 "LexerRules.txt"
return UNIQHITCOUNT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 272 "LexerRules.txt"
return VAR;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 273 "LexerRules.txt"
return VELX;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 274 "LexerRules.txt"
return VELY;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 275 "LexerRules.txt"
return WIN;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 276 "LexerRules.txt"
return WINKO;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 277 "LexerRules.txt"
return WINTIME;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 278 "LexerRules.txt"
return WINPERFECT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 280 "LexerRules.txt"
return AFTERIMAGE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 281 "LexerRules.txt"
return TIME;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 282 "LexerRules.txt"
return LENGTH;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 283 "LexerRules.txt"
return PALCOLOR;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 284 "LexerRules.txt"
return PALINVERTALL;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 285 "LexerRules.txt"
return PALBRIGHT;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 286 "LexerRules.txt"
return PALCONTRAST;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 287 "LexerRules.txt"
return PALPOSTBRIGHT;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 288 "LexerRules.txt"
return PALADD;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 289 "LexerRules.txt"
return PALMUL;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 290 "LexerRules.txt"
return TIMEGAP;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 291 "LexerRules.txt"
return FRAMEGAP;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 292 "LexerRules.txt"
return TRANS; 
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 294 "LexerRules.txt"
return AFTERIMAGETIME;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 295 "LexerRules.txt"
return ALLPALFX;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 296 "LexerRules.txt"
return ANGLEADD;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 297 "LexerRules.txt"
return ANGLEDRAW;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 298 "LexerRules.txt"
return ANGLEMUL;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 299 "LexerRules.txt"
return ANGLESET;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 300 "LexerRules.txt"
return APPENDTOCLIPBOARD;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 301 "LexerRules.txt"
return ASSERTSPECIAL;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 302 "LexerRules.txt"
return ATTACKDIST;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 303 "LexerRules.txt"
return ATTACKMULSET;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 304 "LexerRules.txt"
return BGPALFX;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 305 "LexerRules.txt"
return BINDTOPARENT;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 306 "LexerRules.txt"
return BINDTOROOT;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 307 "LexerRules.txt"
return BINDTOTARGET;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 308 "LexerRules.txt"
return CHANGEANIME;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 309 "LexerRules.txt"
return CHANGEANIME2;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 310 "LexerRules.txt"
return CHANGESTATE;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 311 "LexerRules.txt"
return CLEARCLIPBOARD;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 312 "LexerRules.txt"
return CTRLSET;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 313 "LexerRules.txt"
return DEFENCEMULSET;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 314 "LexerRules.txt"
return DESTROYSELF;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 315 "LexerRules.txt"
return DISPLAYTOCLIPBORAD;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 316 "LexerRules.txt"
return ENVSHAKE;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 317 "LexerRules.txt"
return EXPLOD;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 318 "LexerRules.txt"
return EXPLODBINDTIME;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 319 "LexerRules.txt"
return FALLENVSHAKE;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 320 "LexerRules.txt"
return FORCEFEDDBACK;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 321 "LexerRules.txt"
return GAMEMAKEANIM;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 322 "LexerRules.txt"
return GRAVITY;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 323 "LexerRules.txt"
return HELPER;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 324 "LexerRules.txt"
return HITADD;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 325 "LexerRules.txt"
return HITBY;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 326 "LexerRules.txt"
return HITDEF;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 327 "LexerRules.txt"
return HITFALLDAMAGE;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 328 "LexerRules.txt"
return HITFALLSET;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 329 "LexerRules.txt"
return HITFALLVEL;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 330 "LexerRules.txt"
return HITOVERRIDE;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 331 "LexerRules.txt"
return HITVELSET;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 332 "LexerRules.txt"
return LIFEADD;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 333 "LexerRules.txt"
return LIFESET;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 334 "LexerRules.txt"
return MAKEDUST;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 335 "LexerRules.txt"
return MODIFYEXPLOD;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 336 "LexerRules.txt"
return MOVEHITRESET;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 337 "LexerRules.txt"
return NOTHITBY;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 338 "LexerRules.txt"
return TNULL;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 339 "LexerRules.txt"
return OFFSET;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 340 "LexerRules.txt"
return PALFX;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 341 "LexerRules.txt"
return PARENTVARADD;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 342 "LexerRules.txt"
return PARENTVARSET;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 343 "LexerRules.txt"
return PAUSE;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 344 "LexerRules.txt"
return PLAYERPUSH;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 345 "LexerRules.txt"
return PLAYSND;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 346 "LexerRules.txt"
return POSADD;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 347 "LexerRules.txt"
return POSFREEZ;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 348 "LexerRules.txt"
return POSSET;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 349 "LexerRules.txt"
return POWERADD;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 350 "LexerRules.txt"
return POWERSET;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 351 "LexerRules.txt"
return PROJECTILE;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 352 "LexerRules.txt"
return REMOVEEXPLOD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 353 "LexerRules.txt"
return REVERSALDEF;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 354 "LexerRules.txt"
return SCREENBOUND;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 355 "LexerRules.txt"
return SELFSTATE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 356 "LexerRules.txt"
return SNDPAN;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 357 "LexerRules.txt"
return SPRPRIORITY;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 358 "LexerRules.txt"
return STATETYPESET;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 359 "LexerRules.txt"
return STOPSND;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 360 "LexerRules.txt"
return SUPERPAUSE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 361 "LexerRules.txt"
return TARGETBIND;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 362 "LexerRules.txt"
return TARGETDROP;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 363 "LexerRules.txt"
return TARGETFACING;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 364 "LexerRules.txt"
return TARGETLIFEADD;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 365 "LexerRules.txt"
return TARGETPOWERADD;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 366 "LexerRules.txt"
return TARGETSTATE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 367 "LexerRules.txt"
return TARGETVELADD;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 368 "LexerRules.txt"
return TARGETVELSET;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 369 "LexerRules.txt"
return TURN;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 370 "LexerRules.txt"
return VARADD;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 371 "LexerRules.txt"
return VARRANDOM;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 372 "LexerRules.txt"
return VARRANGESET;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 373 "LexerRules.txt"
return VARSET;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 374 "LexerRules.txt"
return VELADD;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 375 "LexerRules.txt"
return VELMUL;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 376 "LexerRules.txt"
return VELSET;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 377 "LexerRules.txt"
return WIDTH;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 380 "LexerRules.txt"
return VALUE;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 381 "LexerRules.txt"
return XVALUE;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 382 "LexerRules.txt"
return YVALUE;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 384 "LexerRules.txt"
return CharToInt();
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 386 "LexerRules.txt"
ECHO;
	YY_BREAK
#line 3137 "flex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1690 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1690 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1689);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 386 "LexerRules.txt"


void DestroyComment()
{
char c;

   c= yyinput();
   while (c != '\n' && c != 0)
   {	
	c=yyinput();

   }
   nLineNr++;
 
}

void CopyString()
{
   int l = strlen(yytext)-2;
   strncpy (yylval.str, &yytext[1], l); yylval.str[l] = 0;
 
}

void CopyID()
{
	int l=strlen(yytext);
	memcpy(yylval.str,yytext,l);
	yylval.str[l]=0;
 	printf("ID %s line %i \n",yytext,nLineNr);
}

int CharToInt()
{	
	char c;
	c = yytext[0];
	if(c > 90)
	   c-=32;
	yylval.nFloat=(float)c;
	return NUMBER; 


}
